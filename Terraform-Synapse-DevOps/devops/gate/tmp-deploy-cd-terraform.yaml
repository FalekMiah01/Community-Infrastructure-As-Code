#################################################
# Parameters
#################################################
parameters:
  env: '$(env)'
  app_name: '$(app_name)'
  terraform_directory: '$(terraform_directory)'
  terraform_version: "$(terraform_version)"
  service_connection: '$(service_connection)'                      
  key_vault_name: '$(key_vault_name)'     
  tf_state_backend_resource_group_name: '$(tf_state_backend_resource_group_name)'
  tf_state_backend_resource_group_location: '$(tf_state_backend_resource_group_location)'         
  tf_state_backend_storage_account_name: '$(tf_state_backend_storage_account_name)'     
  tf_state_backend_container_name: '$(tf_state_backend_container_name)'      
  tf_state_backend_key_name: '$(app_name).$(env).terraform.tfstate'

#################################################
# Steps
#################################################
steps:
- checkout: self

#################################################
# Azure Key Vault
#################################################
- task: AzureKeyVault@1
  displayName: Retrieve key vault secrets
  inputs:
      azureSubscription: ${{ parameters.service_connection }}
      keyVaultName: ${{ parameters.key_vault_name }}
      secretsFilter: 'ARM-CLIENT-ID, ARM-CLIENT-SECRET, ARM-TENANT-ID, ARM-SUBSCRIPTION-ID'
      runAsPreJob: false

#################################################
# DevOps Extension Task
#################################################
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: Install Terraform
  inputs:
    terraformVersion: ${{ parameters.terraform_version }}

#################################################
# Terraform Init
#################################################
- task: TerraformCLI@0
  displayName: Terraform Init
  inputs:
    command: "init"
    workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.terraform_directory }}/${{ parameters.env }}
    backendType: "azurerm"
    allowTelemetryCollection: true
    backendServiceArm: ${{ parameters.service_connection }}
    runAzLogin: true
    ensureBackend: true
    backendAzureRmResourceGroupName: ${{ parameters.tf_state_backend_resource_group_name }}
    backendAzureRmResourceGroupLocation: ${{ parameters.tf_state_backend_resource_group_location }}
    backendAzureRmStorageAccountName: ${{ parameters.tf_state_backend_storage_account_name }}
    backendAzureRmContainerName: ${{ parameters.tf_state_backend_container_name }}
    backendAzureRmKey: '${{ parameters.tf_state_backend_key_name }}'
  env:
      ARM_CLIENT_ID: $(ARM-CLIENT-ID)
      ARM_CLIENT_SECRET: $(ARM-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM-SUBSCRIPTION-ID)
      ARM_TENANT_ID: $(ARM-TENANT-ID)

#################################################
# Terraform Validate
#################################################
- task: TerraformCLI@0
  displayName: Terraform Validate
  inputs:
      command: validate
      envServiceName: ${{ parameters.service_connection }}
      runAzLogin: true
      workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.terraform_directory }}/${{ parameters.env }}
      allowTelemetryCollection: true
  env:
      ARM_CLIENT_ID: $(ARM-CLIENT-ID)
      ARM_CLIENT_SECRET: $(ARM-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM-SUBSCRIPTION-ID)
      ARM_TENANT_ID: $(ARM-TENANT-ID)

#################################################
# Terraform Plan
#################################################
- task: TerraformCLI@0
  displayName: Terraform Plan
  inputs:
    command: plan
    envServiceName: ${{ parameters.service_connection }}
    runAzLogin: true
    workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.terraform_directory }}/${{ parameters.env }}
    allowTelemetryCollection: true
    commandOptions: '-input=false
                      -var client_id=$(ARM-CLIENT-ID)
                      -var client_secret=$(ARM-CLIENT-SECRET)
                      -var tenant_id=$(ARM-TENANT-ID)
                      -var subscription_id=$(ARM-SUBSCRIPTION-ID)
                      -var tf_state_backend_key_name=${{ parameters.tf_state_backend_key_name }}
                      -var tf_state_backend_resource_group_name=${{ parameters.tf_state_backend_resource_group_name }}
                      -var tf_state_backend_storage_account_name=${{ parameters.tf_state_backend_storage_account_name }}
                      -var tf_state_backend_container_name=${{ parameters.tf_state_backend_container_name }}
                      -var-file="./terraform.tfvars"
                      -out ${BUILD_BUILDNUMBER}.tfplan'
  env:
      ARM_CLIENT_ID: $(ARM-CLIENT-ID)
      ARM_CLIENT_SECRET: $(ARM-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM-SUBSCRIPTION-ID)
      ARM_TENANT_ID: $(ARM-TENANT-ID)

#################################################
# Terraform Apply
#################################################
- task: TerraformCLI@0
  displayName: Terraform Apply
  inputs:
    command: apply
    envServiceName: ${{ parameters.service_connection }}
    workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.terraform_directory }}/${{ parameters.env }}
    allowTelemetryCollection: true
    commandOptions: '-input=false -auto-approve "${BUILD_BUILDNUMBER}.tfplan"'
  env:
      ARM_CLIENT_ID: $(ARM-CLIENT-ID)
      ARM_CLIENT_SECRET: $(ARM-CLIENT-SECRET)
      ARM_SUBSCRIPTION_ID: $(ARM-SUBSCRIPTION-ID)
      ARM_TENANT_ID: $(ARM-TENANT-ID)